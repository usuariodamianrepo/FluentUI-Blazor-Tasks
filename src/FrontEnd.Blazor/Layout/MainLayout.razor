@using Microsoft.AspNetCore.Authorization
@using FrontEnd.Blazor.Helpers
@using Shared

@inherits LayoutComponentBase
@attribute [Authorize]

<FluentLayout>
    <FluentHeader>
        Tasks Management
        <FluentSpacer />
        <AuthorizeView>
            <Authorized>
                <FluentProfileMenu Initials="XX" Style="--fluent-profile-menu-hover: var(--neutral-stroke-focus); padding: 4px;">
                    <StartTemplate>
                        @context.User.Identity!.Name
                    </StartTemplate>
                    <HeaderTemplate>
                        <FluentLabel Typo="@Typography.Header">Login</FluentLabel>
                    </HeaderTemplate>
                    <ChildContent>
                        <div style="width: 250px; height: 80px">
                            <FluentLabel Typo="@Typography.Header" Style="font-weight: bold;">@context.User.Identity!.Name</FluentLabel>
                            <FluentLabel>xxxxxx@tasksmanagement.com</FluentLabel>
                        </div>
                    </ChildContent>
                    <FooterTemplate>
                        <FluentStack>
                            <FluentSpacer />
                            <FluentButton Appearance="Appearance.Lightweight"
                                          IconStart="@(new Icons.Regular.Size20.PlugDisconnected())"
                                          Title="Logout"
                                          OnClick="@LogoutClicked">Logout</FluentButton>
                        </FluentStack>
                    </FooterTemplate>
                </FluentProfileMenu>
            </Authorized>
        </AuthorizeView>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <AuthorizeView>
            <Authorized>
                <NavMenu />
                <FluentBodyContent Class="body-content">
                    <ErrorBoundary>
                        <ChildContent>
                            <div class="content">
                                @Body
                            </div>
                        </ChildContent>
                        <ErrorContent Context="ex">
                            <div class="blazor-error-boundary">@ex.Message</div>
                        </ErrorContent>
                    </ErrorBoundary>
                </FluentBodyContent>
            </Authorized>
            <NotAuthorized>
                <Login />
                <FluentBodyContent Class="body-content">
                    <ErrorBoundary>
                        <ChildContent>
                            <div class="content" style="background-image: url('images/linkedin.svg');background-size: cover;background-repeat: no-repeat;">
                                <h3>An effective & intuitive do-it-all task manager.</h3>
                                <p>
                                    <ul>
                                        <li>Add, prioritize & organize tasks with ease</li>
                                        <li>Seamless integration with top business tools</li>
                                        <li>Advanced task tracker for teams of all sizes</li>
                                    </ul>
                                    Don't have an account yet? Send an email to the Administrator
                                </p>
                            </div>
                        </ChildContent>
                    </ErrorBoundary>
                </FluentBodyContent>
            </NotAuthorized>
        </AuthorizeView>
    </FluentStack>
    <FluentToastProvider />
    <FluentDialogProvider />
    <FluentKeyCodeProvider />
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>

@code {
    async Task LogoutClicked()
    {
        var logoutModel = new UserSessionDTO();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        StateHasChanged();
    }
}